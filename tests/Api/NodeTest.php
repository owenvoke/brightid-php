<?php

declare(strict_types=1);

use OwenVoke\BrightID\Api\Node;

beforeEach(fn () => $this->apiClass = Node::class);

it('should get state of the current node', function () {
    $expectedArray = [
        'data' => [
            'lastProcessedBlock' => 14552629,
            'verificationsBlock' => 14552400,
            'initOp' => 0,
            'sentOp' => 31,
            'verificationsHashes' => [
                14552160 => [
                    'Seed' => 'a_iLej8pWmJ7r8Z-LKE8iEGaP_B49NujOiROl2cEyX0',
                    'SeedConnected' => '5aaAmERZ58nVennUk1Pu1Jro4cflBLfTP3nbVqeSpss',
                    'SeedConnectedWithFriend' => '9M_YGIeUX6lGnc7oun7qm4-7fTZbp77Io-7AJaJebmM',
                    'BrightID' => 'rhZSLSOy8A0rWlF_0f_3zFf280fRD32IENVM5zemw8U',
                    'DollarForEveryone' => '0I1kOqyCWRS8r4PF0lEmhFsXBYgY7-_vkGgd1SG1V_I',
                    'SocialRecoverySetup' => 'd3dkqAjhlDMyX3lu_05m_vkijttgBskLmH8EU4J_yAM',
                    'predefined' => '47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU',
                ],
                14552400 => [
                    'Seed' => 'a_iLej8pWmJ7r8Z-LKE8iEGaP_B49NujOiROl2cEyX0',
                    'SeedConnected' => 'TX_mqknsXdz218k0U4F3VRYI9RANPeEiySXgdphAZmw',
                    'SeedConnectedWithFriend' => '9M_YGIeUX6lGnc7oun7qm4-7fTZbp77Io-7AJaJebmM',
                    'BrightID' => 'MxCQpGKZxpPtUsvITrfui129S6H2bivqVK0tenY18tg',
                    'DollarForEveryone' => 'DChJBVgLo-3sI1nGMxW5269VzUXuJzev0a5JXI-mQL8',
                    'SocialRecoverySetup' => 'zlguTLoh67-0THuqNuC-lXQ0MGgMbloSXVSv7oLP3Jg',
                    'predefined' => '47DEQpj8HBSa-_TImW-5JCeuQeRkm5NMpJWZG3hSuFU',
                ],
            ],
            'wISchnorrPublic' => [
                'p' => '5809605995369958062859502514532724972476569034218748305558695096368107421536196717960675155295033129543971317817279269819186658888183450260123764666623549912523206130902282758532486451815169816435580340504377356255370045115451490073369677015253096338928457394411783255739084029266648275700051453833904348933868481291633789342319999665101237202396510117053734716899865060811673768535244065359696983942107965074592377306546773769291036685805933768704256212828099170164549733839320449421580409090151846971411880251692452580508561645713284380487972126962933856737107855479262514825125849829729454007095558725592786887932934568522517472885002926586719688619750455617108904091242404027358787389077251654109129299377677652439389608523724635432898474299534957680099898760045101040703484763361588276126319655089926037558655303902386797798268018699768246036868995112808949035077505978772470884795875329185859462570714696397491458277839',
                'q' => '115792089237316195423570984634543488696558837605497246864089130975994398638081',
                'g' => '543623506316320925421807706786698426840740315821963903992794478648784872078108940103783207328898775439719139690788216801209714452409915629078086905990935998700004106735033833654521199942780482295931119239923533210067689239071919965813574292497360880495980835759564366211991575919211990181687834022674339751937726213677500615151371533612994939461866506147976462933112281559093209128193048700895221217036454053001870781794335863960634377707071199331010402028736010435853810854011360589082218662485841861908467491110562538132711564054981399238889413966626291439266468451065535713438902367124980434823215965454940587223911905612597825793775225357531391833972943319392759480220874653463207498636359569531200052905317377215347906735400589689742370937178796448326692752240899900621358310864421412975531543765128187737196978695668615237887249315269212717532928589325603949502580342253701401707433317535315874097298127438605967367221',
                'y' => '102964963216919836997485233710632456332121948077261433402448391933946993446261387267021712377190413949093105652494933455388224154759757833226542206149814401323678455046537876007775613325885653142888002284457932066029852532661774223446885837679797477344093394998905410958460436881700364185390931016105160478266516094741277363179620848856343443412245665472644312469625177489362604970811731931471243080872917565838826787463631473500789536001367484280302039963699538460293836318090241860299777284652260998893708339555898890087022152454708482326359119493760776581328726848425452222555413976273131033236786427495507845892452827229219206148875080004874151781403419830344725492902685988544615296368980787280213708378372178187434125544610366131814340832108791938086929539090091132803345020839482436558416806844592320348838194240540033326307025974520532085390823377503051799465942055766724511064243345239886509207150443155403227470653',
            ],
            'ethSigningAddress' => '0xb1d71f62bee34e9fc349234c201090c33bcdf6db',
            'naclSigningKey' => '/Vyj7CyCiHpSeH25ll5HpuHHXyVVA1sJt/zUn+nIRR0=',
            'consensusSenderAddress' => '0x636d49c1d76ff8e04767c68fe75ec9900719464b',
            'development' => false,
            'version' => '6.15.0',
        ],
    ];

    $api = $this->getApiMock();

    $api->expects($this->once())
        ->method('get')
        ->with('/state')
        ->willReturn($expectedArray);

    /** @var Node $api */
    expect($api->state())->toBe($expectedArray);
});
